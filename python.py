T√¥i hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. D∆∞·ªõi ƒë√¢y l√† file Python ho√†n ch·ªânh (app.py) ch·ª©a to√†n b·ªô logic ·ª©ng d·ª•ng ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh Streamlit c·ªßa b·∫°n.

B·∫°n ch·ªâ c·∫ßn sao ch√©p to√†n b·ªô n·ªôi dung n√†y v√† l∆∞u th√†nh file app.py. ƒê·∫£m b·∫£o b·∫°n c≈©ng ƒë√£ t·∫°o file requirements.txt v√† c·∫•u h√¨nh kh√≥a API trong Streamlit Secrets.

Python

# app.py

import streamlit as st
import pandas as pd
import numpy as np
import json
from google import genai
from google.genai.errors import APIError

# --- Mock ho·∫∑c T·ª± tri·ªÉn khai c√°c h√†m t√†i ch√≠nh (V√¨ numpy_financial kh√¥ng c√≥ s·∫µn) ---

def npv(rate, cash_flows):
    """T√≠nh Gi√° tr·ªã Hi·ªán t·∫°i R√≤ng (Net Present Value - NPV)."""
    # Cash flows l√† m·∫£ng [C0, C1, C2, ...] v·ªõi C0 l√† v·ªën ƒë·∫ßu t∆∞ (√¢m)
    # Rate l√† WACC (t·ª∑ l·ªá chi·∫øt kh·∫•u)
    total_pv = 0
    for i, cash_flow in enumerate(cash_flows):
        total_pv += cash_flow / (1 + rate) ** i
    return total_pv

def irr(cash_flows):
    """T√≠nh T·ª∑ su·∫•t Sinh l·ªùi N·ªôi b·ªô (Internal Rate of Return - IRR)
    S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p x·∫•p x·ªâ ƒë∆°n gi·∫£n (Bisection Method)
    """
    if len(cash_flows) < 2:
        return np.nan
        
    # X√°c ƒë·ªãnh gi·ªõi h·∫°n t√¨m ki·∫øm
    # Thay ƒë·ªïi gi·ªõi h·∫°n t√¨m ki·∫øm an to√†n h∆°n
    low_rate = -0.99999 
    high_rate = 5.0 # M·ªü r·ªông gi·ªõi h·∫°n l√™n 500%
    
    # S·ªë l·∫ßn l·∫∑p ƒë·ªÉ ƒë·∫°t ƒë·ªô ch√≠nh x√°c
    iterations = 100
    tolerance = 1e-6
    
    # H√†m t√≠nh NPV cho m·ªôt rate c·ª• th·ªÉ
    def calculate_npv(rate, flows):
        return sum([cf / (1 + rate)**i for i, cf in enumerate(flows)])

    # T√¨m IRR b·∫±ng ph∆∞∆°ng ph√°p chia ƒë√¥i (Bisection)
    for _ in range(iterations):
        mid_rate = (low_rate + high_rate) / 2
        
        # Tr√°nh l·ªói chia cho 0 n·∫øu 1 + mid_rate = 0 (mid_rate = -1)
        if 1 + mid_rate <= 0:
            low_rate = mid_rate # ƒê·∫©y low_rate l√™n
            continue
        
        npv_value = calculate_npv(mid_rate, cash_flows)

        if np.abs(npv_value) < tolerance:
            return mid_rate
        elif npv_value > 0:
            low_rate = mid_rate
        else:
            high_rate = mid_rate
            
    # N·∫øu kh√¥ng h·ªôi t·ª• sau 100 l·∫ßn l·∫∑p, tr·∫£ v·ªÅ gi√° tr·ªã trung b√¨nh
    return (low_rate + high_rate) / 2

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App Ph√¢n T√≠ch Hi·ªáu qu·∫£ D·ª± √°n T√†i ch√≠nh",
    layout="wide"
)

st.title("·ª®ng d·ª•ng Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n ƒê·∫ßu t∆∞ üìà (Gemini AI)")
st.markdown("---")

# --- Kh·ªüi t·∫°o State v√† Kh√≥a API ---
if 'extracted_params' not in st.session_state:
    st.session_state.extracted_params = None
if 'cash_flow_df' not in st.session_state:
    st.session_state.cash_flow_df = None
if 'metrics_df' not in st.session_state:
    st.session_state.metrics_df = None
    
# L·∫•y API Key t·ª´ Streamlit Secrets
try:
    API_KEY = st.secrets["GEMINI_API_KEY"]
except KeyError:
    API_KEY = ""
    st.warning("‚ö†Ô∏è **L∆ØU √ù:** Ch∆∞a c·∫•u h√¨nh kh√≥a API. Vui l√≤ng th√™m `GEMINI_API_KEY` v√†o Streamlit Secrets.")


# --- 1. H√†m AI L·ªçc D·ªØ li·ªáu (S·ª≠ d·ª•ng Structured Output) ---

# T·∫Øt cache ƒë·ªÉ ƒë·∫£m b·∫£o AI ƒë·ªçc l·∫°i n·ªôi dung m·ªõi khi ng∆∞·ªùi d√πng thay ƒë·ªïi
def extract_parameters(document_text, api_key):
    """S·ª≠ d·ª•ng Gemini API ƒë·ªÉ tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh v√†o c·∫•u tr√∫c JSON."""
    if not api_key:
        st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh 'GEMINI_API_KEY'.")
        return None

    st.info("AI ƒëang ƒë·ªçc vƒÉn b·∫£n v√† tr√≠ch xu·∫•t th√¥ng s·ªë...")

    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y tr√≠ch xu·∫•t c√°c th√¥ng s·ªë sau t·ª´ vƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p b√™n d∆∞·ªõi, v√† ƒë·∫£m b·∫£o k·∫øt qu·∫£ ph·∫£i l√† m·ªôt ƒë·ªëi t∆∞·ª£ng JSON ho√†n ch·ªânh.

    1. V·ªën ƒë·∫ßu t∆∞ (Initial_Investment)
    2. D√≤ng ƒë·ªùi d·ª± √°n (Project_Lifespan)
    3. Doanh thu h√†ng nƒÉm (Annual_Revenue)
    4. Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (Annual_Expense)
    5. Chi ph√≠ v·ªën b√¨nh qu√¢n (WACC)
    6. Thu·∫ø su·∫•t (Tax_Rate)

    Y√™u c·∫ßu v·ªÅ ƒë∆°n v·ªã v√† ƒë·ªãnh d·∫°ng:
    - T·∫•t c·∫£ c√°c gi√° tr·ªã ti·ªÅn t·ªá ph·∫£i ƒë∆∞·ª£c chuy·ªÉn v·ªÅ ƒë∆°n v·ªã 't·ª∑ ƒë·ªìng' (v√≠ d·ª•: 30 t·ª∑ -> 30.0). N·∫øu vƒÉn b·∫£n kh√¥ng r√µ r√†ng, h√£y ghi nh·∫≠n gi√° tr·ªã b·∫°n t√¨m th·∫•y.
    - WACC v√† Thu·∫ø su·∫•t ph·∫£i ƒë∆∞·ª£c chuy·ªÉn v·ªÅ d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 13% -> 0.13, 20% -> 0.2).

    VƒÉn b·∫£n ƒë∆∞·ª£c cung c·∫•p:
    ---
    {document_text}
    ---
    """
    
    # ƒê·ªãnh nghƒ©a JSON Schema
    response_schema = {
        "type": "OBJECT",
        "properties": {
            "Initial_Investment": {"type": "NUMBER", "description": "V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (t·ª∑ ƒë·ªìng)"},
            "Project_Lifespan": {"type": "INTEGER", "description": "D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm)"},
            "Annual_Revenue": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm (t·ª∑ ƒë·ªìng)"},
            "Annual_Expense": {"type": "NUMBER", "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (t·ª∑ ƒë·ªìng)"},
            "WACC": {"type": "NUMBER", "description": "Chi ph√≠ v·ªën b√¨nh qu√¢n (th·∫≠p ph√¢n, v√≠ d·ª•: 0.13)"},
            "Tax_Rate": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t (th·∫≠p ph√¢n, v√≠ d·ª•: 0.2)"}
        },
        "required": ["Initial_Investment", "Project_Lifespan", "Annual_Revenue", "Annual_Expense", "WACC", "Tax_Rate"]
    }

    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt,
            config=genai.types.GenerateContentConfig(
                response_mime_type="application/json",
                response_schema=response_schema
            )
        )
        
        # X·ª≠ l√Ω chu·ªói JSON tr·∫£ v·ªÅ
        result_json_str = response.text.strip().replace("```json", "").replace("```", "")
        extracted_data = json.loads(result_json_str)
        return extracted_data
        
    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("L·ªói: AI tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ƒëi·ªÅu ch·ªânh vƒÉn b·∫£n.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None


# --- 2 & 3. H√†m t√≠nh to√°n v√† X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn ---
@st.cache_data(show_spinner=False)
def calculate_metrics(params):
    """T√≠nh to√°n OCF, x√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn, v√† t√≠nh NPV, IRR, PP, DPP."""
    
    # 1. Tr√≠ch xu·∫•t c√°c tham s·ªë
    C0 = params['Initial_Investment'] # V·ªën ƒë·∫ßu t∆∞
    L = params['Project_Lifespan'] # V√≤ng ƒë·ªùi
    R = params['Annual_Revenue'] # Doanh thu
    E = params['Annual_Expense'] # Chi ph√≠
    WACC = params['WACC'] # Chi ph√≠ v·ªën
    t = params['Tax_Rate'] # Thu·∫ø su·∫•t
    
    # 2. T√≠nh to√°n Kh·∫•u hao h√†ng nƒÉm (D) (Gi·∫£ ƒë·ªãnh kh·∫•u hao ƒë·ªÅu - ƒë∆∞·ªùng th·∫≥ng)
    D_a = C0 / L
    
    # 3. T√≠nh to√°n D√≤ng ti·ªÅn ho·∫°t ƒë·ªông r√≤ng (OCF)
    # OCF = (EBIT - Thu·∫ø) + Kh·∫•u hao
    # OCF = (R - E - D_a) * (1 - t) + D_a
    OCF = (R - E - D_a) * (1 - t) + D_a
    
    # 4. X√¢y d·ª±ng B·∫£ng D√≤ng ti·ªÅn
    years = np.arange(L + 1)
    
    # D√≤ng ti·ªÅn thu·∫ßn (Net Cash Flow)
    NCF = [0.0] * (L + 1)
    NCF[0] = -C0 # V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (√¢m)
    
    for i in range(1, L + 1):
        NCF[i] = OCF
        
    df_cf = pd.DataFrame({
        'NƒÉm': years,
        'Doanh thu (t·ª∑)': [0] + [R] * L,
        'Chi ph√≠ (t·ª∑)': [0] + [E] * L,
        'Kh·∫•u hao (t·ª∑)': [0] + [D_a] * L,
        'D√≤ng ti·ªÅn thu·∫ßn (NCF, t·ª∑)': NCF,
    })
    
    # 5. T√≠nh to√°n c√°c ch·ªâ s·ªë Hi·ªáu qu·∫£ D·ª± √°n
    cash_flows_for_calc = np.array(NCF)
    
    # --- NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng) ---
    NPV_value = npv(WACC, cash_flows_for_calc)
    
    # --- IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô) ---
    IRR_value = irr(cash_flows_for_calc)

    # --- PP (Th·ªùi gian Ho√†n v·ªën) ---
    cumulative_cf = np.cumsum(NCF)
    PP_value = np.nan
    for i in range(1, L + 1):
        if cumulative_cf[i] >= 0:
            # T√≠nh to√°n x·∫•p x·ªâ tuy·∫øn t√≠nh
            PP_value = i - 1 + abs(cumulative_cf[i-1]) / NCF[i]
            break

    # --- DPP (Th·ªùi gian Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u) ---
    discounted_cf = [NCF[0]] # C0
    for i in range(1, L + 1):
        # Chi·∫øt kh·∫•u OCF v·ªÅ nƒÉm hi·ªán t·∫°i
        DCF_i = NCF[i] / (1 + WACC) ** i
        discounted_cf.append(DCF_i)
        
    cumulative_dcf = np.cumsum(discounted_cf)
    DPP_value = np.nan
    for i in range(1, L + 1):
        if cumulative_dcf[i] >= 0:
            # T√≠nh to√°n x·∫•p x·ªâ tuy·∫øn t√≠nh
            DPP_value = i - 1 + abs(cumulative_dcf[i-1]) / discounted_cf[i]
            break

    # 6. T·∫°o b·∫£ng T√≥m t·∫Øt Ch·ªâ s·ªë
    metrics_data = {
        'Ch·ªâ s·ªë': ['NPV', 'IRR', 'Th·ªùi gian Ho√†n v·ªën (PP)', 'Ho√†n v·ªën Chi·∫øt kh·∫•u (DPP)'],
        'Gi√° tr·ªã': [NPV_value, IRR_value, PP_value, DPP_value],
        'ƒê∆°n v·ªã': ['T·ª∑ ƒë·ªìng', '%', 'NƒÉm', 'NƒÉm'],
        'Ti√™u chu·∫©n ƒê√°nh gi√°': [f'> 0', f'> WACC ({WACC*100:.2f}%)', f'< D√≤ng ƒë·ªùi ({L} nƒÉm)', f'< D√≤ng ƒë·ªùi ({L} nƒÉm)']
    }
    df_metrics = pd.DataFrame(metrics_data)

    return df_cf, df_metrics

# --- 4. H√†m AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ D·ª± √°n ---

# T·∫Øt cache ƒë·ªÉ m·ªói l·∫ßn nh·∫•n n√∫t l√† m·ªôt l·∫ßn g·ªçi AI m·ªõi
def get_ai_analysis(metrics_df, extracted_params, api_key):
    """G·ª≠i c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ v√† th√¥ng s·ªë c∆° b·∫£n ƒë·∫øn Gemini ƒë·ªÉ nh·∫≠n ph√¢n t√≠ch."""
    st.info("AI ƒëang ph√¢n t√≠ch c√°c ch·ªâ s·ªë t√†i ch√≠nh...")
    
    # ƒê·ªãnh d·∫°ng c√°c th√¥ng s·ªë c∆° b·∫£n
    param_str = "\n".join([f"- {k}: {v}" for k, v in extracted_params.items()])
    
    # ƒê·ªãnh d·∫°ng b·∫£ng ch·ªâ s·ªë (c·∫ßn tabulate)
    metrics_str = metrics_df.to_markdown(index=False, floatfmt=".4f")
    
    wacc_percent = extracted_params['WACC'] * 100
    lifespan = extracted_params['Project_Lifespan']
    
    prompt = f"""
    B·∫°n l√† m·ªôt chuy√™n gia l·∫≠p d·ª± √°n kinh doanh c·∫•p cao. D·ª±a tr√™n c√°c th√¥ng s·ªë d·ª± √°n v√† ch·ªâ s·ªë hi·ªáu qu·∫£ t√†i ch√≠nh sau, h√£y ƒë∆∞a ra m·ªôt ƒë√°nh gi√° chuy√™n nghi·ªáp, kh√°ch quan v√† to√†n di·ªán v·ªÅ t√≠nh kh·∫£ thi c·ªßa d·ª± √°n.

    ƒê√°nh gi√° c·∫ßn t·∫≠p trung v√†o:
    1. Ti√™u ch√≠ NPV, IRR so v·ªõi WACC ({wacc_percent:.2f}%).
    2. Th·ªùi gian ho√†n v·ªën (PP, DPP) so v·ªõi v√≤ng ƒë·ªùi d·ª± √°n ({lifespan} nƒÉm).
    3. K·∫øt lu·∫≠n v·ªÅ vi·ªác n√™n hay kh√¥ng n√™n ƒë·∫ßu t∆∞, d·ª±a tr√™n nguy√™n t·∫Øc quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ c∆° b·∫£n.
    4. G·ª£i √Ω v·ªÅ c√°c r·ªßi ro ho·∫∑c ƒëi·ªÉm c·∫ßn ƒëi·ªÅu ch·ªânh (n·∫øu c·∫ßn).

    ---
    TH√îNG S·ªê D·ª∞ √ÅN C∆† B·∫¢N:
    {param_str}

    CH·ªà S·ªê HI·ªÜU QU·∫¢ D·ª∞ √ÅN:
    {metrics_str}
    ---
    """
    
    try:
        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text
    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ph√¢n t√≠ch: {e}"

# --- Giao di·ªán Ch√≠nh ---

st.subheader("1. Nh·∫≠p li·ªáu - D√°n n·ªôi dung Ph∆∞∆°ng √°n Kinh doanh")
st.caption("Vui l√≤ng sao ch√©p to√†n b·ªô n·ªôi dung t·ª´ t√†i li·ªáu/ƒë·ªÅ xu·∫•t c·ªßa b·∫°n v√† d√°n v√†o √¥ b√™n d∆∞·ªõi. AI s·∫Ω t·ª± ƒë·ªông tr√≠ch xu·∫•t c√°c th√¥ng s·ªë.")

# S·ª≠ d·ª•ng Text Area ƒë·ªÉ d√°n n·ªôi dung t·ª´ file Word
document_text = st.text_area(
    "D√°n n·ªôi dung Ph∆∞∆°ng √°n Kinh doanh t·∫°i ƒë√¢y:",
    height=300,
    # Gi√° tr·ªã m·∫´u
    value="V·ªën ƒë·∫ßu t∆∞ 30 t·ª∑. d·ª± √°n c√≥ v√≤ng ƒë·ªùi trong 10 nƒÉm, b·∫Øt ƒë·∫ßu c√≥ d√≤ng ti·ªÅn t·ª´ cu·ªëi nƒÉm th·ª© nh·∫•t c·ªßa d·ª± √°n, m·ªói nƒÉm t·∫°o ra 3,5 t·ª∑ doanh thu, v√† chi ph√≠ m·ªói nƒÉm l√† 2 t·ª∑, thu·∫ø su·∫•t 20%. WACC c·ªßa doanh nghi·ªáp l√† 13%."
)

if st.button("L·ªçc D·ªØ li·ªáu v√† Ph√¢n t√≠ch D·ª± √°n üîç", type="primary"):
    if not document_text.strip():
        st.error("Vui l√≤ng d√°n n·ªôi dung ph∆∞∆°ng √°n kinh doanh v√†o √¥ nh·∫≠p li·ªáu.")
    elif not API_KEY:
        st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")
    else:
        # X√≥a cache c·ªßa h√†m tr√≠ch xu·∫•t ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n ch·∫°y l·∫°i
        # L∆∞u √Ω: calculate_metrics v·∫´n d√πng cache ƒë·ªÉ t·ªëi ∆∞u n·∫øu th√¥ng s·ªë kh√¥ng ƒë·ªïi
        
        with st.spinner('ƒêang tr√≠ch xu·∫•t th√¥ng s·ªë t√†i ch√≠nh b·∫±ng AI...'):
            extracted_params = extract_parameters(document_text, API_KEY)
            
            if extracted_params:
                st.session_state.extracted_params = extracted_params
                
                # T√≠nh to√°n c√°c ch·ªâ s·ªë
                df_cf, df_metrics = calculate_metrics(extracted_params)
                st.session_state.cash_flow_df = df_cf
                st.session_state.metrics_df = df_metrics
                st.success("Tr√≠ch xu·∫•t v√† T√≠nh to√°n th√†nh c√¥ng!")

# --- Hi·ªÉn th·ªã k·∫øt qu·∫£ ---

if st.session_state.extracted_params:
    
    # Hi·ªÉn th·ªã c√°c th√¥ng s·ªë ƒë√£ l·ªçc
    st.markdown("---")
    st.subheader("2. Th√¥ng s·ªë D·ª± √°n ƒë√£ ƒë∆∞·ª£c AI L·ªçc")
    
    col1, col2, col3 = st.columns(3)
    params = st.session_state.extracted_params
    
    with col1:
        st.metric("V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu ($C_0$)", f"{params['Initial_Investment']:,.2f} t·ª∑")
        st.metric("Doanh thu H√†ng nƒÉm ($R$)", f"{params['Annual_Revenue']:,.2f} t·ª∑")
    with col2:
        st.metric("D√≤ng ƒë·ªùi D·ª± √°n ($L$)", f"{params['Project_Lifespan']} nƒÉm")
        st.metric("Chi ph√≠ H√†ng nƒÉm ($E$)", f"{params['Annual_Expense']:,.2f} t·ª∑")
    with col3:
        st.metric("WACC ($k$)", f"{params['WACC'] * 100:.2f}%")
        st.metric("Thu·∫ø su·∫•t ($t$)", f"{params['Tax_Rate'] * 100:.0f}%")

    
    # Hi·ªÉn th·ªã B·∫£ng D√≤ng ti·ªÅn
    st.markdown("---")
    st.subheader("3. B·∫£ng D√≤ng ti·ªÅn v√† T√≠nh to√°n OCF")
    
    # T√≠nh to√°n OCF ƒë·ªÉ hi·ªÉn th·ªã
    L = params['Project_Lifespan']
    C0 = params['Initial_Investment']
    D_a = C0 / L
    R = params['Annual_Revenue']
    E = params['Annual_Expense']
    t = params['Tax_Rate']
    
    OCF_calculated = (R - E - D_a) * (1 - t) + D_a
    st.info(f"D√≤ng ti·ªÅn Ho·∫°t ƒë·ªông R√≤ng (OCF) h√†ng nƒÉm l√†: **{OCF_calculated:,.2f} t·ª∑ VNƒê**")

    # Hi·ªÉn th·ªã Dataframe
    st.dataframe(
        st.session_state.cash_flow_df.style.format({
            'Doanh thu (t·ª∑)': '{:,.2f}',
            'Chi ph√≠ (t·ª∑)': '{:,.2f}',
            'Kh·∫•u hao (t·ª∑)': '{:,.2f}',
            'D√≤ng ti·ªÅn thu·∫ßn (NCF, t·ª∑)': '{:,.2f}',
        }),
        use_container_width=True
    )

    # Hi·ªÉn th·ªã Ch·ªâ s·ªë Hi·ªáu qu·∫£ D·ª± √°n
    st.markdown("---")
    st.subheader("4. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n (NPV, IRR, PP, DPP)")
    
    metrics_df = st.session_state.metrics_df
    
    # Format l·∫°i b·∫£ng cho ƒë·∫πp v√† d·ªÖ ƒë·ªçc
    formatted_metrics_df = metrics_df.copy()
    
    # Th√™m c·ªôt k·∫øt qu·∫£ ƒë√°nh gi√° nhanh
    def evaluate(row):
        value = row['Gi√° tr·ªã']
        wacc = params['WACC']
        lifespan = params['Project_Lifespan']
        
        if pd.isna(value): return "Ch∆∞a x√°c ƒë·ªãnh"
        
        if row['Ch·ªâ s·ªë'] == 'NPV':
            return "Kh·∫£ thi (NPV > 0)" if value > 0 else "Kh√¥ng kh·∫£ thi (NPV <= 0)"
        elif row['Ch·ªâ s·ªë'] == 'IRR':
            return "Kh·∫£ thi (IRR > WACC)" if value > wacc else "Kh√¥ng kh·∫£ thi (IRR <= WACC)"
        elif row['Ch·ªâ s·ªë'] in ['Th·ªùi gian Ho√†n v·ªën (PP)', 'Ho√†n v·ªën Chi·∫øt kh·∫•u (DPP)']:
            return "Kh·∫£ thi (< L)" if value < lifespan else "Kh√¥ng kh·∫£ thi (>= L)"
        return "-"

    formatted_metrics_df['ƒê√°nh gi√° Nhanh'] = formatted_metrics_df.apply(evaluate, axis=1)

    st.table(
        formatted_metrics_df.style.format({
            # ƒê·ªãnh d·∫°ng IRR th√†nh %
            'Gi√° tr·ªã': lambda x: f'{x * 100:,.2f}' if x < 1 and x > -1 and x not in (0, np.nan) else f'{x:,.2f}', 
            'ƒê∆°n v·ªã': lambda x: '%' if x == '%' else x,
        }).hide(axis='index')
    )
    
    # N√∫t b·∫•m Y√™u c·∫ßu AI Ph√¢n t√≠ch
    st.markdown("---")
    st.subheader("5. Nh·∫≠n x√©t Chuy√™n s√¢u t·ª´ AI")

    if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch Ch·ªâ s·ªë (NPV, IRR,...) üß†", key="ai_analysis_button"):
        if not API_KEY:
            st.error("Vui l√≤ng c·∫•u h√¨nh Kh√≥a 'GEMINI_API_KEY' trong Streamlit Secrets ƒë·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng AI.")
        else:
            with st.spinner('ƒêang t·ªïng h·ª£p d·ªØ li·ªáu v√† g·ª≠i y√™u c·∫ßu ph√¢n t√≠ch...'):
                ai_result = get_ai_analysis(
                    metrics_df=st.session_state.metrics_df,
                    extracted_params=st.session_state.extracted_params,
                    api_key=API_KEY
                )
                st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                st.success(ai_result)

else:
    st.info("Vui l√≤ng d√°n n·ªôi dung ph∆∞∆°ng √°n kinh doanh v√†o √¥ nh·∫≠p li·ªáu v√† nh·∫•n n√∫t ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
